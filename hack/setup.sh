#!/usr/bin/env bash

# This script is used to bootstrap a new local kind kubernetes cluster
# with a postgres database. It also builds and installs the pizza-oven service
# to the cluster and opens a local kubernetes port to start receiving requests.
#
# WARNING: this script is intended for local development and testing only. It is
# NOT suitable for production usage.

set -eu

ROOTPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; cd .. ; pwd -P )"

# Env variables for the script. The top level .env file is not used since there
# is some drift in how the kubernetes postgres operator creates resources.
# For example, there is no way to manually set the password on the postgres
# datbase and must be manually introspected after bootstrapping.
DATABASE_NAME=pizza
DATABASE_USER=opensauced-admin
LOCAL_DATABASE_PORT=9999
LOCAL_SERVER_PORT=8080

# Ensures the necessary binaries are present on the system. Exits if one is missing.
function check_deps() {
    if ! [ -x "$(command -v make)" ]; then
        echo "Error: make is required to run this script" >&2
        exit 1
    fi

    if ! [ -x "$(command -v kubectl)" ]; then
        echo "Error: kubectl is required to run this script" >&2
        exit 1
    fi

    if ! [ -x "$(command -v kind)" ]; then
        echo "Error: kind is required to run this script" >&2
        exit 1
    fi

    if ! [ -x "$(command -v helm)" ]; then
        echo "Error: helm is required to run this script" >&2
        exit 1
    fi

    if ! [ -x "$(command -v psql)" ]; then
        echo "Error: psql is required to run this script" >&2
        exit 1
    fi
}

# This function:
# - bootstraps a local kubernetes kind cluster
# - installs the postgres operators and custom resources to the new cluster
# - waits for the postgres operator to be ready
function setup_kind_cluster() {
    kind create cluster --name opensauced-pizza

    # helm charts for postgres-operator
    helm repo add postgres-operator-charts https://opensource.zalando.com/postgres-operator/charts/postgres-operator
    helm install postgres-operator postgres-operator-charts/postgres-operator

    # helm charts for postgres-operator-ui
    helm repo add postgres-operator-ui-charts https://opensource.zalando.com/postgres-operator/charts/postgres-operator-ui
    helm install postgres-operator-ui postgres-operator-ui-charts/postgres-operator-ui

    # Wait for the postgres cluster to be ready
    kubectl rollout status deployment postgres-operator -n default --timeout=300s
}

# This function deploys a new postgres database using the "acid.zalan.do"
# custom resources. It will wait for the resources to be ready.
function deploy_postgres_db() {
    kubectl apply -f - << EOF
---
apiVersion: "acid.zalan.do/v1"
kind: postgresql
metadata:
  name: opensauced-pizza-postgres-cluster
spec:
  teamId: "opensauced"
  volume:
    size: 2Gi
  numberOfInstances: 1
  users:
    # The database owner/admin for the pizza database
    ${DATABASE_USER}:
    - superuser
    - createdb
  databases:
    ${DATABASE_NAME}: opensauced-admin
  postgresql:
    version: "12"
EOF

    # The postgres pods may take a second to be ready to wait for.
    sleep 3
    kubectl wait pods -n default -l application=spilo --for condition=Ready --timeout=300s
}

# This function opens a port to the local kubernets postgres pod. Once this port
# is open on the "LOCAL_DATABASE_PORT", it can be interacted with directly.
function forward_postgres_port() {
    PGPOD=$(kubectl get pods -o jsonpath={.items..metadata.name} -l application=spilo -n default)
    kubectl port-forward ${PGPOD} ${LOCAL_DATABASE_PORT}:5432 -n default
}

# This function is a convience wrapper around psql and injects the generated
# kubernetes password from the opaque secrets.
function wrapped_psql() {
    export PGUSERNAME=$(kubectl get secret opensauced-admin.opensauced-pizza-postgres-cluster.credentials.postgresql.acid.zalan.do -o 'jsonpath={.data.username}' | base64 -d)
    export PGPASSWORD=$(kubectl get secret opensauced-admin.opensauced-pizza-postgres-cluster.credentials.postgresql.acid.zalan.do -o 'jsonpath={.data.password}' | base64 -d)
    export PGSSLMODE=require

    psql \
        -h localhost \
        -p ${LOCAL_DATABASE_PORT} \
        -d ${DATABASE_NAME} \
        -U ${PGUSERNAME} \
        "$@"
}

# This function applies an arbitrary pizza service from the loaded image.
# WARNING: this function injects the opaque password secret generated by the postgres
function apply_pizza_service() {
    PG_PASSWORD=$(kubectl get secret opensauced-admin.opensauced-pizza-postgres-cluster.credentials.postgresql.acid.zalan.do -o 'jsonpath={.data.password}' | base64 -d)

    kubectl apply -f - << EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pizza-oven-deployment
spec:
  selector:
    matchLabels:
      app: pizza-oven
  replicas: 1
  template:
    metadata:
      labels:
        app: pizza-oven
    spec:
      containers:
      - name: pizza-oven
        image: pizza-oven:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: DATABASE_PORT
          value: "5432"
        - name: DATABASE_HOST
          value: "opensauced-pizza-postgres-cluster.default.svc.cluster.local"
        - name: DATABASE_USER
          value: "opensauced-admin"
        - name: DATABASE_PASSWORD
          value: "${PG_PASSWORD}"
        - name: DATABASE_DBNAME
          value: "pizza"
        - name: SERVER_PORT
          value: "8080"
        ports:
        - containerPort: 8080
EOF

    # The pod may take a second to be able to be waited on via kubectl
    sleep 3
    kubectl wait pods -n default -l "app=pizza-oven" --for condition=Ready --timeout=300s
}

# This function opens a local port forward to the pizza-service.
function port_forward_pizza_service() {
    PIZZA_POD=$(kubectl get pods -o jsonpath={.items..metadata.name} -l "app=pizza-oven" -n default)
    kubectl port-forward $PIZZA_POD ${LOCAL_SERVER_PORT}:8080 -n default
}

cat << EOF
 ____  ____  ____  ____    __      _____  _  _  ____  _  _ 
(  _ \(_  _)(_   )(_   )  /__\    (  _  )( \/ )( ___)( \( )
 )___/ _)(_  / /_  / /_  /(__)\    )(_)(  \  /  )__)  )  ( 
(__)  (____)(____)(____)(__)(__)  (_____)  \/  (____)(_)\_)

           STARTING SETUP OF TEST KIND CLUSTER
                  AND POSTGRES DATABASE

EOF

check_deps

echo
echo "###########################################################"
echo "Setting up kind kubernetes cluster" 
echo "and postgres operators"
echo
setup_kind_cluster
deploy_postgres_db

echo
echo "########################################################################"
echo "Opening port to postgres operator to apply database migrations"
echo
forward_postgres_port &

# Sleep for abit so the postgres database has time to initialize and
# be ready to accept requests and incoming queries
sleep 10

# apply the migrations to the database
echo
echo "########################################################################"
echo "Applying database migrations"
echo
wrapped_psql -f ${ROOTPATH}/migrations/20230622103000_baseline.sql

# Build the pizza-oven container
echo
echo "########################################################################"
echo "Building pizza oven container"
echo
make build

# Upload the newly built image to the kind cluster's context
echo
echo "########################################################################"
echo "Uploading pizza oven container to kind cluster"
echo
kind --name opensauced-pizza load docker-image pizza-oven:latest

echo
echo "########################################################################"
echo "Applying kubernetes deployment for the pizza oven service"
echo
apply_pizza_service

echo
echo "########################################################################"
echo "Setup complete!!!!!"
echo
echo "Opening port on ${LOCAL_SERVER_PORT} to pizza oven service"
echo "Tests requests can now be made to localhost:${LOCAL_SERVER_PORT}"
echo
port_forward_pizza_service
